version: "3.8"
services:
  ##########################################################
  ##### MICRO SERVICES
  ##########################################################

  file-processor:
    container_name: file-processor
    build:
      context: ./microservices/file_processor
    depends_on:
      - minio
      - kafka
      - mongodb
    ports:
      - "8000:8000"
    environment:
      - STORAGE_HOST=minio
      - STORAGE_PORT=9000
      - STORAGE_ACCESS_KEY=${MINIO_ROOT_USER}
      - STORAGE_SECRET_KEY=${MINIO_ROOT_PASSWORD}
      - STORAGE_BUCKET_NAME=uploads
      - KAFKA_HOST=kafka
      - KAFKA_PORT=29092
      - KAFKA_TOPIC=file_messages
      - MONGO_HOST=mongodb
      - MONGO_PORT=27017
    restart: on-failure

  raw_code_extractor:
    container_name: raw-code-extractor-consumer
    build:
      context: ./microservices/generators
      args:
        - RUN_ARG=raw-code
    depends_on:
      kafka:
        condition: service_healthy
      minio:
        condition: service_started
      mongodb:
        condition: service_started
    environment:
      - KAFKA_HOST=kafka
      - KAFKA_PORT=29092
      - KAFKA_TOPIC=file_messages
      - KAFKA_CONSUMER_GROUP=file-processor-1
    restart: on-failure

  library_doc_generator:
    container_name: library-doc-generator-consumer
    build:
      context: ./microservices/generators
      args:
        - RUN_ARG=library-doc-string
    depends_on:
      kafka:
        condition: service_healthy
      minio:
        condition: service_started
      mongodb:
        condition: service_started
    environment:
      - KAFKA_HOST=kafka
      - KAFKA_PORT=29092
      - KAFKA_TOPIC=file_messages
      - KAFKA_CONSUMER_GROUP=file-processor-2
    restart: on-failure

  doc_string_generator:
    container_name: doc-string-generator-consumer
    build:
      context: ./microservices/generators
      args:
        - RUN_ARG=doc-string
    depends_on:
      kafka:
        condition: service_healthy
      minio:
        condition: service_started
      mongodb:
        condition: service_started
    environment:
      - KAFKA_HOST=kafka
      - KAFKA_PORT=29092
      - KAFKA_TOPIC=file_messages
      - KAFKA_CONSUMER_GROUP=file-processor-3
      - MONGO_HOST=mongodb
      - MONGO_PORT=27017
      - STORAGE_HOST=minio
      - STORAGE_PORT=9000
      - STORAGE_ACCESS_KEY=${MINIO_ROOT_USER}
      - STORAGE_SECRET_KEY=${MINIO_ROOT_PASSWORD}
      - STORAGE_BUCKET_NAME=uploads
    restart: on-failure

  ##########################################################
  ##### SUPPORTING SERVICES
  ##########################################################


  postgres:
    image: postgres:latest
    container_name: my_postgres
    environment:
      POSTGRES_USER: myuser
      POSTGRES_PASSWORD: mypassword
      POSTGRES_DB: mydatabase
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    restart: on-failure

  zookeeper:
    image: confluentinc/cp-zookeeper:latest
    container_name: zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    ports:
      - "2181:2181"
    healthcheck:
      test: [ "CMD-SHELL", "echo srvr | nc localhost 2181 || exit 1" ]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: on-failure

  kafka:
    image: confluentinc/cp-kafka:latest
    container_name: kafka
    depends_on:
      zookeeper:
        condition: service_healthy
    ports:
      - "9092:9092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:29092,PLAINTEXT_HOST://localhost:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
    healthcheck:
      test: [ "CMD-SHELL", "kafka-topics --bootstrap-server localhost:29092 --list" ]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
    restart: on-failure

  minio:
    container_name: minio
    image: quay.io/minio/minio
    volumes:
      - ${DOCKER_VOLUME_DIRECTORY:-.}/minio/data:/data
    environment:
      - MINIO_ROOT_USER=${MINIO_ROOT_USER:?Root user name is required for minio}
      - MINIO_ROOT_PASSWORD=${MINIO_ROOT_PASSWORD:?Root password is required for minio}
    ports:
      - "9010:9000"
      - "9001:9001"
    command: server /data --console-address ":9001"
    restart: on-failure

  mongodb:
    container_name: mongo-store
    image: mongo:bionic
    ports:
      - "27017:27017"
    restart: on-failure

volumes:
  postgres_data:
